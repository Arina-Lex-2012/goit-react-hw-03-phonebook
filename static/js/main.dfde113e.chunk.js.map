{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","App.js","reportWebVitals.js","index.js","components/ContactList/ContactList.module.css"],"names":["ContactForm","state","name","number","nameInputId","uuidv4","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","type","pattern","title","required","onChange","id","React","Component","Filter","ContactListItem","onDeleteContact","className","css","contactList__item","contactList__text","onClick","ContactList","contacts","map","contact","App","filter","deleteContact","contactId","prevState","formSubmitHandler","find","toLowerCase","alert","changeFilter","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","normalizedFilter","visibleContacts","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.dfde113e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass ContactForm extends React.Component {\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\n    nameInputId = uuidv4();\r\n    numberInputId = uuidv4();\r\n\r\n    handleChange = (event) => {\r\n        const { name, value } = event.currentTarget;\r\n    \r\n        this.setState({\r\n          [name]: value\r\n        })\r\n    };\r\n\r\n    handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n\r\n        this.props.onSubmit(this.state);\r\n        this.reset();\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({\r\n            name: '',\r\n            number: ''\r\n        })\r\n    }\r\n\r\n    render (){\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <label htmlFor={this.nameInputId}>\r\n                    Name{' '}       \r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n\r\n                        value={this.state.name}\r\n                        onChange={this.handleChange}\r\n                        id={this.nameInputId}\r\n                    />\r\n                </label> <br/><br/>\r\n                <label htmlFor={this.numberInputId}> \r\n                    Number{' '}       \r\n                    <input\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n\r\n                        value={this.state.number}\r\n                        onChange={this.handleChange}\r\n                        id={this.numberInputId}\r\n                    />\r\n                </label><br/> <br/>\r\n                <button type='submit'>Add contact</button>\r\n            </form>\r\n            )\r\n        }\r\n};\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;","import React from 'react';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n    return (\r\n        <label>\r\n            Find contacts by name  <br/>     \r\n            <input\r\n                type=\"text\" \r\n                value={value}\r\n                onChange = {onChange}\r\n            />\r\n        </label>\r\n    )\r\n};\r\n\r\nexport default Filter;","import PropTypes from \"prop-types\";\r\nimport React from 'react';\r\nimport css from './ContactList.module.css';\r\n\r\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => {\r\n    return (\r\n        <li key={id} className={css.contactList__item}>\r\n            <p className={css.contactList__text}>{name}: {number}</p>\r\n            <button onClick={onDeleteContact}>Delete</button>\r\n        </li>\r\n    );\r\n  };\r\n\r\n  ContactListItem.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n  };\r\n  \r\nexport default ContactListItem;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport ContactListItem from './ContactListItem';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n    return (\r\n        <ul>\r\n            {contacts.map((contact) => (\r\n                <ContactListItem \r\n                    key = {contact.id}\r\n                    name = {contact.name}\r\n                    number = {contact.number}\r\n                    onDeleteContact = {() => onDeleteContact(contact.id)}\r\n                />  \r\n            ))}\r\n        </ul>\r\n    )\r\n};\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n  };\r\n\r\nexport default ContactList;","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n// import initialContacts from './components/ContactList/contacts.json';\n\n\nclass App extends React.Component {\n  state = {\n    contacts: [],\n    filter: ''\n  };\n\n  deleteContact = (contactId) => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  formSubmitHandler = ({ name, number}) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number\n    }\n\n    if (this.state.contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())){\n      return alert(`${contact.name} is already exist!`);\n    } else {      \n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts]\n      }))\n    }\n  };\n\n  changeFilter = (event) => {\n    this.setState({ filter: event.currentTarget.value})\n  }\n\n  componentDidMount(){\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if(parsedContacts){\n      this.setState({ contacts: parsedContacts });\n    }    \n  }\n\n  componentDidUpdate(prevState){\n    if(this.state.contacts !== prevState.contacts){\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render(){\n    const { filter } = this.state;\n    const normalizedFilter = this.state.filter.toLowerCase();\n\n    const visibleContacts = this.state.contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n    \n      return (\n        <div>\n          \n          <h1>Phonebook</h1>\n            <ContactForm \n              onSubmit = {this.formSubmitHandler}\n            />\n\n          <h2>Contacts</h2> \n            <Filter \n              value={filter} \n              onChange = {this.changeFilter}\n            />\n            \n            <ContactList \n              contacts = {visibleContacts} \n              onDeleteContact = {this.deleteContact}\n            /> \n        </div>\n      )    \n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList__item\":\"ContactList_contactList__item__32b37\",\"contactList__text\":\"ContactList_contactList__text__-mAyh\"};"],"sourceRoot":""}